//CHAPTER-1 INTRODUCTION TO REACT.js

/* A. WHAT IS REACT
  1. React.js, or commonly referred to as React, is a popular open-source JavaScript Library for building 
     User Interfaces (UIs), specifically for applications with a single page.
     
  2. It was developed and is maintained by Facebook (now Meta Platforms).
  
  3. React is not a complete Front-End Framework but rather a Library. It supports Server-Side Rendering.
  
  4. React creates a VIRTUAL DOM in memory. Instead of manipulating the browser's DOM directly, React 
     creates a virtual DOM in memory, where it does all the necessary manipulating, before making the 
     changes in the browser DOM. 
     
  5. React uses React-Router-DOM for navigation between the pages which helps in avoiding full page reload 
     as compared to JavaScript where for page navigation there was a full page reload. */




/* B. REACT ECOSYSTEM - LIBRARIES
  1. React has several associated libraries and packages that provide additional functionality to serve
     specific purposes.

  2. When we install the React library using a package manager like npm or yarn, typically only the core 
     React Library (react) and the React DOM Library (react-dom) are installed by default. These two 
     packages are the essential dependencies required to start building React applications.

  3. Here are some of the key libraries in the React ecosystem:

   - React DOM: This is the main library that serves as the entry point for rendering React Components to the
     Browser's DOM (Document Object Model). It provides methods like render() and hydrate() for rendering 
     React components and handling updates to the DOM.

   - React Native: React Native is a separate library that allows us to build mobile applications for
     iOS and Android platforms using the same React Components.

   - React Router: React Router is a popular third-party library for handling client-side routing in React 
     applications. It provides components and utilities for defining routes, navigating between different 
     components or views, and managing the application's URL state without full page reload.

   - React Testing Library: This is a popular testing utility library for React that promotes better testing 
     practices by encouraging developers to write tests that resemble how users interact with components.

   - React Redux: This is the official React binding for Redux. It provides a way to connect React 
     components to the Redux store, allowing them to access and dispatch actions to update the state.

   - React Spring: React Spring is a library for creating animations and transitions in React applications.
     It provides a declarative and easy-to-use API for creating complex animations and integrates well with 
     React's Component lifecycle. */




/* C. ADVANTAGES OF REACT
  1. React uses virtual DOM to render the view. As the name suggests, virtual DOM is a virtual representation of
     the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual
     DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the 
     efficiency of the app improves.
     
  2. React allows developers to develop engaging user interfaces that can be easily navigated in various search
     engines. It also allows server-side rendering, which boosts the SEO of an app.

  3. React uses component-based architecture for developing applications. Components are independent and reusable
     bits of code. These components can be shared across various applications having similar functionality. 
     The re-use of components increases the pace of development. */  



     
/* D. REACT OVER OTHER FRAMEWORK
  1. Performance: React excels at handling dynamic UI's with minimal re-renders, keeping our app fast and snappy.
  2. Composability: React components promote code reusability, making development faster and easier to maintain.
  3. JSX: JSX syntax blends JavaScript with HTML, making UI creation rintuitive for developers.




/* E. REACT DEVELOPMENT TOOLKIT
  1. React Development Tool is like a pre-packaged Lego set specifically designed for building React 
     applications. It comes with everything we need to get started quickly, including all the essential 
     pieces (tools, configurations, and dependencies), clear instructions, and a pre-configured development 
     environment.
     
  2. They are many React Develoment Tools like Vite, Create React App, Next.js etc.
  
  3. Here's how Create React App works in simple terms:
  
     - Easy Setup: Instead of setting up a React project from scratch, which involves installing and 
       configuring multiple tools and dependencies, we simply run a single command (npx create-react-app 
       my-app) to generate a new React project with a pre-configured setup.
       
     - Bundled Tools: CRA comes bundled with all the necessary tools and configurations needed for a modern
       React project, such as a development server, a build script, testing utilities, and a pre-configured
       bundler (Webpack under the hood).
       
     - Development Server: Once the project is generated, we can start the development server with a single
       command (npm start). This server automatically reloads the app whenever we make changes to the code,
       making the development process smoother and more efficient.
       
     - Ready-to-Use Structure: The generated project comes with a pre-defined file structure and a minimal
       React app already set up, so we can start building our components and features right away without 
       worrying about the boilerplate setup.
       
     - Production Build: When we're ready to deploy your app, CRA provides a command (npm run build) that
       optimizes and bundles our code for production, generating a highly optimized and ready-to-deploy
       version of our application. */




/* F. REACT BUNDLERS
  1. React Bundlers, often called module bundlers or simply bundlers, are tools that are used to bundle and
     optimize the different modules (JavaScript files, CSS files, images, etc.) that make up a React 
     application into a single or a few optimized files that can be served to the client.

  2. Imagine you're building a house with different materials like bricks, wood, glass, and other 
     components. Each of these materials is like a separate file or module in your React application (e.g., 
     JavaScript files, CSS files, images, etc.). Now, imagine trying to construct the entire house by 
     bringing in each individual brick, piece of wood, or pane of glass one by one. It would be incredibly
     inefficient, time-consuming, and disorganized. This is where a React bundler comes into play. A bundler 
     is like a skilled construction worker who takes all the individual materials (files/modules) and 
     carefully packages them together into a few well-organized bundles or packages.

  3. Here's how a React bundler works:
     - Gathering Materials: The bundler first gathers all the individual files and modules that make up your
       React application, including JavaScript files, CSS files, images, and any other assets.
     - Resolving Dependencies: Just like how certain building materials depend on others (e.g., windows need
       frames), the bundler resolves the dependencies between different files and modules to ensure they 
       work together correctly.
     - Optimizing and Compressing: The bundler then optimizes and compresses the files, removing any 
       unnecessary code or whitespace, similar to how a construction worker might trim excess materials or
       compress them for efficient transport.
     - Bundling: Finally, the bundler takes all the optimized and compressed files and bundles them together
       into one or a few compact packages or bundles. 

  4. Popular React bundlers like Webpack, Rollup, and Parcel. */




/* G. HOW REACT WORKS INTERNALLY
  1. The server sends the index.html file to the client (browser).
  
  2. The browser parses the HTML file and renders the initial DOM structure, including the <div id="root">
     </div> element.
     
  3. The browser then fetches the JavaScript Bundles (generated by Webpack) specified in the HTML file,
     including index.js.
     
  4. When the index.js bundle is downloaded and executed, it bootstraps the React Application by rendering 
     the root component (App) into the <div id="root"></div> element in the DOM. 
     
  5. The index.js file is executed, which calls ReactDOM.createRoot().render() with the <App /> component as
      the root component. */

